#!/usr/bin/env node

/**
 * Build-time script to create BundledWorkflows.ts from source workflow files
 * Dynamically discovers all YAML files in the source directory
 */

import { readFile, writeFile, readdir, mkdir } from 'node:fs/promises';
import { join, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';
import { existsSync } from 'node:fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const sourceDir = join(__dirname, '..', '..', 'resources', 'workflows');
const targetDir = join(__dirname, '..', 'workflows');
const bundledWorkflowsFile = join(
  __dirname,
  '..',
  'src',
  'services',
  'BundledWorkflows.ts'
);

async function buildWorkflows() {
  try {
    console.log('üîÑ Building workflow bundle...');
    console.log(`Source: ${sourceDir}`);
    console.log(`Target: ${targetDir}`);

    // Ensure target directory exists
    if (!existsSync(targetDir)) {
      await mkdir(targetDir, { recursive: true });
    }

    // Read source directory and find all YAML files
    const files = await readdir(sourceDir);
    const yamlFiles = files.filter(
      file =>
        (file.endsWith('.yaml') || file.endsWith('.yml')) &&
        !file.startsWith('.') // Ignore hidden files
    );

    if (yamlFiles.length === 0) {
      console.warn('‚ö†Ô∏è  No YAML workflow files found in source directory');
      return;
    }

    console.log(`Found ${yamlFiles.length} workflow files:`);

    // Copy workflow files for build and generate imports
    const workflowImports = [];
    const workflowEntries = [];

    for (const file of yamlFiles) {
      const sourcePath = join(sourceDir, file);
      const targetPath = join(targetDir, file);

      // Copy file to workflows directory for bundling
      const content = await readFile(sourcePath, 'utf8');
      await writeFile(targetPath, content);

      // Generate safe variable names (replace non-alphanumeric with underscore)
      const workflowName = file.replace(/\.(yaml|yml)$/, '');
      const safeVarName = workflowName.replace(/[^a-zA-Z0-9]/g, '_');
      const importName = `${safeVarName}Yaml`;

      workflowImports.push(
        `import ${importName} from '../../workflows/${file}?raw';`
      );
      workflowEntries.push(`  '${workflowName}': ${importName}`);

      console.log(`  ‚úÖ ${file} -> ${workflowName}`);
    }

    // Generate BundledWorkflows.ts for production build
    const bundledWorkflowsContent = `/**
 * Bundled workflow definitions
 * Generated at build time from source workflow files
 * DO NOT EDIT - This file is auto-generated by scripts/build-workflows.js
 * 
 * Found ${yamlFiles.length} workflow files:
${yamlFiles.map(f => ` * - ${f}`).join('\n')}
 */

${workflowImports.join('\n')}

export const BUNDLED_WORKFLOWS: Record<string, string> = {
${workflowEntries.join(',\n')}
};

export function getBundledWorkflow(name: string): string | null {
  return BUNDLED_WORKFLOWS[name] || null;
}

export function getBundledWorkflowNames(): string[] {
  return Object.keys(BUNDLED_WORKFLOWS);
}
`;

    await writeFile(bundledWorkflowsFile, bundledWorkflowsContent);
    console.log(`üìù Generated ${bundledWorkflowsFile}`);
    console.log(
      `üéâ Workflow bundle build complete! (${yamlFiles.length} workflows)`
    );
  } catch (error) {
    console.error('‚ùå Error building workflows:', error.message);
    process.exit(1);
  }
}

buildWorkflows();
