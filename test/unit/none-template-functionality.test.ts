/**
 * Tests for "none" template functionality
 *
 * Tests the ability to disable specific document types using "none" templates
 */

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { ProjectDocsManager } from '../../src/project-docs-manager.js';
import { join } from 'node:path';
import { tmpdir } from 'node:os';
import { mkdir, rmdir, readFile } from 'node:fs/promises';

describe('None Template Functionality', () => {
  let testProjectPath: string;
  let projectDocsManager: ProjectDocsManager;

  beforeEach(async () => {
    // Create test project directory
    testProjectPath = join(tmpdir(), `none-template-test-${Date.now()}`);
    await mkdir(testProjectPath, { recursive: true });

    projectDocsManager = new ProjectDocsManager();
  });

  afterEach(async () => {
    // Clean up test directory
    try {
      await rmdir(testProjectPath, { recursive: true });
    } catch {
      // Ignore cleanup errors
    }
  });

  describe('None Template Creation', () => {
    it('should create none template for architecture', async () => {
      const result = await projectDocsManager.createOrLinkProjectDocs(
        testProjectPath,
        {
          architecture: 'none',
          requirements: 'freestyle',
          design: 'freestyle',
        },
        {}
      );

      expect(result.created).toContain('architecture.md');
      expect(result.created).toContain('requirements.md');
      expect(result.created).toContain('design.md');

      // Verify the none template content
      const archPath = await projectDocsManager.readDocument(
        testProjectPath,
        'architecture'
      );
      expect(archPath).toContain('architecture.md');

      // Read the actual file to verify placeholder content
      const archContent = await readFile(archPath, 'utf-8');
      expect(archContent).toContain('Architecture Placeholder');
      expect(archContent).toContain('DO NOT EDIT THIS FILE');
      expect(archContent).toContain('plan file');
    });

    it('should create none template for requirements', async () => {
      const result = await projectDocsManager.createOrLinkProjectDocs(
        testProjectPath,
        {
          architecture: 'freestyle',
          requirements: 'none',
          design: 'freestyle',
        },
        {}
      );

      expect(result.created).toContain('requirements.md');

      // Verify the none template content
      const reqPath = await projectDocsManager.readDocument(
        testProjectPath,
        'requirements'
      );
      expect(reqPath).toContain('requirements.md');

      // Read the actual file to verify placeholder content
      const reqContent = await readFile(reqPath, 'utf-8');
      expect(reqContent).toContain('Requirements Placeholder');
      expect(reqContent).toContain('DO NOT EDIT THIS FILE');
      expect(reqContent).toContain('plan file');
    });

    it('should create none template for design', async () => {
      const result = await projectDocsManager.createOrLinkProjectDocs(
        testProjectPath,
        {
          architecture: 'freestyle',
          requirements: 'freestyle',
          design: 'none',
        },
        {}
      );

      expect(result.created).toContain('design.md');

      // Verify the none template content
      const designPath = await projectDocsManager.readDocument(
        testProjectPath,
        'design'
      );
      expect(designPath).toContain('design.md');

      // Read the actual file to verify placeholder content
      const designContent = await readFile(designPath, 'utf-8');
      expect(designContent).toContain('Design Placeholder');
      expect(designContent).toContain('DO NOT EDIT THIS FILE');
      expect(designContent).toContain('plan file');
    });

    it('should support mixed usage with none templates', async () => {
      // Create a test README file
      const readmePath = join(testProjectPath, 'README.md');
      await mkdir(testProjectPath, { recursive: true });
      const fs = await import('node:fs/promises');
      await fs.writeFile(
        readmePath,
        '# Test Project\n\nThis is a test project.'
      );

      const result = await projectDocsManager.createOrLinkProjectDocs(
        testProjectPath,
        {
          architecture: 'freestyle', // Template
          design: 'none', // None template
        },
        {
          requirements: readmePath, // File link
        }
      );

      expect(result.created).toContain('architecture.md');
      expect(result.created).toContain('design.md');
      expect(result.linked).toContain('requirements.md');

      // Verify each document type
      const archPath = await projectDocsManager.readDocument(
        testProjectPath,
        'architecture'
      );
      const archContent = await readFile(archPath, 'utf-8');
      expect(archContent).toContain('INSTRUCTIONS FOR ARCHITECTURE');

      const reqPath = await projectDocsManager.readDocument(
        testProjectPath,
        'requirements'
      );
      const reqContent = await readFile(reqPath, 'utf-8');
      expect(reqContent).toContain('This is a test project');

      const designPath = await projectDocsManager.readDocument(
        testProjectPath,
        'design'
      );
      const designContent = await readFile(designPath, 'utf-8');
      expect(designContent).toContain('Design Placeholder');
      expect(designContent).toContain('DO NOT EDIT THIS FILE');
    });

    it('should create all none templates when all are disabled', async () => {
      const result = await projectDocsManager.createOrLinkProjectDocs(
        testProjectPath,
        {
          architecture: 'none',
          requirements: 'none',
          design: 'none',
        },
        {}
      );

      expect(result.created).toEqual([
        'architecture.md',
        'requirements.md',
        'design.md',
      ]);
      expect(result.linked).toEqual([]);

      // Verify all contain placeholder content
      const archPath = await projectDocsManager.readDocument(
        testProjectPath,
        'architecture'
      );
      const reqPath = await projectDocsManager.readDocument(
        testProjectPath,
        'requirements'
      );
      const designPath = await projectDocsManager.readDocument(
        testProjectPath,
        'design'
      );

      const archContent = await readFile(archPath, 'utf-8');
      const reqContent = await readFile(reqPath, 'utf-8');
      const designContent = await readFile(designPath, 'utf-8');

      expect(archContent).toContain('Architecture Placeholder');
      expect(reqContent).toContain('Requirements Placeholder');
      expect(designContent).toContain('Design Placeholder');

      // All should contain the DO NOT EDIT instruction
      expect(archContent).toContain('DO NOT EDIT THIS FILE');
      expect(reqContent).toContain('DO NOT EDIT THIS FILE');
      expect(designContent).toContain('DO NOT EDIT THIS FILE');
    });
  });

  describe('Template Discovery', () => {
    it('should include none in available templates', async () => {
      const availableTemplates =
        await projectDocsManager.templateManager.getAvailableTemplates();

      expect(availableTemplates.architecture).toContain('none');
      expect(availableTemplates.requirements).toContain('none');
      expect(availableTemplates.design).toContain('none');
    });
  });
});
